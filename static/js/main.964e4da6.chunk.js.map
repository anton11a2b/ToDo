{"version":3,"sources":["Components/tasksFilter/tasksFilter.jsx","Components/footer/footer.jsx","Components/task/task.jsx","Components/taskList/taskList.jsx","Components/newTaskForm/newTaskForm.jsx","Components/todo/todo.jsx","index.jsx"],"names":["TasksFilter","label","hasClass","selecteFilter","className","type","onClick","defaultProps","Footer","filters","toDo","clearCompleted","elements","map","event","target","textContent","Task","props","onLabelChange","setState","value","onSubmit","onToggleModified","preventDefault","date","state","time","formatDistanceToNow","addSuffix","includeSeconds","this","timer","setInterval","clearInterval","done","hidden","modified","onDeleted","onToggleDone","checked","onChange","includes","autoFocus","Component","Date","TaskList","tasks","id","NewTaskForm","onTaskAdded","placeholder","Todo","maxId","todoData","createTask","filtersData","createFilter","activeFilter","deleteDoneTasks","filter","el","onSelected","deleteTask","addTask","newTask","todoCount","length","todoDataForRender","checkActiveFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.964e4da6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tasksFilter.css';\n\nconst TasksFilter = ({ label, hasClass, selecteFilter }) => {\n  let className = '';\n\n  if (hasClass) {\n    className = 'selected';\n  }\n\n  return (\n    <button type=\"button\" className={className} onClick={selecteFilter}>\n      {label}\n    </button>\n  );\n};\n\nTasksFilter.defaultProps = {\n  label: '',\n  hasClass: false,\n  selecteFilter: () => {},\n};\n\nTasksFilter.propTypes = {\n  label: PropTypes.string,\n  hasClass: PropTypes.bool,\n  selecteFilter: PropTypes.func,\n};\n\nexport default TasksFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TasksFilter from '../tasksFilter/tasksFilter';\nimport './footer.css';\n\nconst Footer = ({ filters, toDo, selecteFilter, clearCompleted }) => {\n  const elements = filters.map(({ label, hasClass }) => (\n    <li key={label}>\n      <TasksFilter\n        label={label}\n        hasClass={hasClass}\n        selecteFilter={(event) => selecteFilter(event.target.textContent)}\n      />\n    </li>\n  ));\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{toDo} items left</span>\n      <ul className=\"filters\">{elements}</ul>\n      <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  selecteFilter: () => {},\n  clearCompleted: () => {},\n  filters: [],\n  toDo: 0,\n};\n\nFooter.propTypes = {\n  selecteFilter: PropTypes.func,\n  clearCompleted: PropTypes.func,\n  filters: PropTypes.arrayOf(PropTypes.any),\n  toDo: PropTypes.number,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\nimport './task.css';\n\nexport default class Task extends Component {\n  constructor(props) {\n    super(props);\n\n    const { date, label } = this.props;\n    this.state = {\n      time: formatDistanceToNow(date, {\n        addSuffix: true,\n        includeSeconds: true,\n      }),\n      label,\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      const { date } = this.props;\n\n      this.setState({\n        time: formatDistanceToNow(date, {\n          addSuffix: true,\n          includeSeconds: true,\n        }),\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  onLabelChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    const { onToggleModified } = this.props;\n\n    event.preventDefault();\n    onToggleModified();\n  };\n\n  render() {\n    const { done, hidden, modified, onDeleted, onToggleDone, onToggleModified } = this.props;\n    const { time, label } = this.state;\n\n    let className = '';\n\n    if (done) {\n      className += ' completed';\n    }\n\n    if (hidden) {\n      className += ' hidden';\n    }\n\n    if (modified) {\n      className += ' editing';\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={done} onChange={onToggleDone} />\n          <label>\n            <span className=\"description\">{label}</span>\n            <span className=\"created\">{time}</span>\n          </label>\n          <button type=\"button\" onClick={onToggleModified} className=\"icon icon-edit\" />\n          <button type=\"button\" onClick={onDeleted} className=\"icon icon-destroy\" />\n        </div>\n        {className.includes('editing') && (\n          <form onSubmit={this.onSubmit}>\n            <input onChange={this.onLabelChange} type=\"text\" className=\"edit\" value={label} autoFocus />\n          </form>\n        )}\n      </li>\n    );\n  }\n}\n\nTask.defaultProps = {\n  label: '',\n  done: false,\n  hidden: false,\n  modified: false,\n  date: new Date(),\n  onDeleted: () => {},\n  onToggleDone: () => {},\n  onToggleModified: () => {},\n};\n\nTask.propTypes = {\n  done: PropTypes.bool,\n  hidden: PropTypes.bool,\n  modified: PropTypes.bool,\n  label: PropTypes.string,\n  onDeleted: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleModified: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../task/task';\nimport './taskList.css';\n\nconst TaskList = ({ tasks, onDeleted, onToggleDone, onToggleModified }) => (\n  <ul className=\"todo-list\">\n    {tasks.map(({ label, done, hidden, modified, id, date }) => (\n      <Task\n        key={id}\n        date={date}\n        done={done}\n        label={label}\n        hidden={hidden}\n        modified={modified}\n        onDeleted={() => onDeleted(id)}\n        onToggleDone={() => onToggleDone(id)}\n        onToggleModified={() => onToggleModified(id)}\n      />\n    ))}\n  </ul>\n);\n\nTaskList.defaultProps = {\n  tasks: [],\n  onDeleted: () => {},\n  onToggleDone: () => {},\n  onToggleModified: () => {},\n};\n\nTaskList.propTypes = {\n  onDeleted: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleModified: PropTypes.func,\n  tasks: PropTypes.arrayOf(PropTypes.any),\n};\n\nexport default TaskList;\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './newTaskForm.css';\r\n\r\nexport default class NewTaskForm extends Component {\r\n  state = {\r\n    label: '',\r\n  };\r\n\r\n  onLabelChange = (event) => {\r\n    this.setState({\r\n      label: event.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (event) => {\r\n    const { onTaskAdded } = this.props;\r\n    const { label } = this.state;\r\n\r\n    event.preventDefault();\r\n    onTaskAdded(label);\r\n    this.setState({\r\n      label: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { label } = this.state;\r\n\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <input\r\n            autoFocus\r\n            type=\"text\"\r\n            className=\"new-todo\"\r\n            value={label}\r\n            onChange={this.onLabelChange}\r\n            placeholder=\"What needs to be done?\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nNewTaskForm.defaultProps = {\r\n  onTaskAdded: () => {},\r\n};\r\n\r\nNewTaskForm.propTypes = {\r\n  onTaskAdded: PropTypes.func,\r\n};\r\n","import React, { Component } from 'react';\nimport Footer from '../footer/footer';\nimport TaskList from '../taskList/taskList';\nimport NewTaskForm from '../newTaskForm/newTaskForm';\nimport './todo.css';\n\nexport default class Todo extends Component {\n  maxId = 1;\n\n  state = {\n    todoData: [this.createTask('Completed task'), this.createTask('Editing task'), this.createTask('Active task')],\n    filtersData: [\n      this.createFilter('All', true),\n      this.createFilter('Active', false),\n      this.createFilter('Completed', false),\n    ],\n    activeFilter: 'All',\n  };\n\n  deleteDoneTasks = () => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.filter((el) => !el.done);\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onSelected = (label) => {\n    this.setState(({ filtersData }) => {\n      const newFiltersData = filtersData.map((el) => {\n        if (el.label !== label) {\n          return { ...el, hasClass: false };\n        }\n\n        return { ...el, hasClass: true };\n      });\n\n      return {\n        filtersData: newFiltersData,\n        activeFilter: label,\n      };\n    });\n  };\n\n  deleteTask = (id) => {\n    this.setState(({ todoData }) => {\n      const newArray = todoData.filter((el) => el.id !== id);\n\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  addTask = (label) => {\n    const newTask = this.createTask(label);\n\n    this.setState(({ todoData }) => {\n      const newArray = [...todoData, newTask];\n\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.map((el) => {\n        if (el.id === id) {\n          return { ...el, done: !el.done };\n        }\n\n        return el;\n      });\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onToggleModified = (id) => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.map((el) => {\n        if (el.id === id) {\n          return { ...el, modified: !el.modified };\n        }\n\n        return el;\n      });\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  createFilter(label, hasClass) {\n    return {\n      label,\n      hasClass,\n    };\n  }\n\n  createTask(label) {\n    return {\n      label,\n      done: false,\n      hidden: false,\n      modified: false,\n      id: this.maxId++,\n      date: new Date(),\n    };\n  }\n\n  checkActiveFilter(activeFilter, el) {\n    switch (activeFilter) {\n      case 'Active':\n        if (el.done) {\n          return { ...el, hidden: true };\n        }\n\n        return { ...el, hidden: false };\n      case 'Completed':\n        if (!el.done) {\n          return { ...el, hidden: true };\n        }\n\n        return { ...el, hidden: false };\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { todoData, filtersData, activeFilter } = this.state;\n    const todoCount = todoData.filter((el) => !el.done).length;\n    const todoDataForRender =\n      activeFilter === 'All' ? todoData : todoData.map((el) => this.checkActiveFilter(activeFilter, el));\n\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm onTaskAdded={this.addTask} />\n        <section className=\"main\">\n          <TaskList\n            tasks={todoDataForRender}\n            modified={this.modified}\n            onDeleted={this.deleteTask}\n            onToggleDone={this.onToggleDone}\n            onToggleModified={this.onToggleModified}\n          />\n          <Footer\n            toDo={todoCount}\n            filters={filtersData}\n            selecteFilter={this.onSelected}\n            clearCompleted={this.deleteDoneTasks}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todo from './Components/todo/todo';\n\nReactDOM.render(<Todo />, document.getElementById('container'));\n"],"sourceRoot":""}