{"version":3,"sources":["Components/tasksFilter/tasksFilter.jsx","Components/tasksFilter/index.js","Components/footer/footer.jsx","Components/footer/index.js","Components/task/task.jsx","Components/task/index.js","Components/taskList/taskList.jsx","Components/taskList/index.js","Components/newTaskForm/newTaskForm.jsx","Components/newTaskForm/index.js","Components/todo/index.js","Components/todo/todo.jsx","index.js"],"names":["TasksFilter","label","hasClass","selecteFilter","className","onClick","defaultProps","Footer","filters","toDo","clearCompleted","elements","map","event","target","textContent","Task","state","time","formatDistanceToNow","props","date","addSuffix","includeSeconds","onLabelChange","e","setState","value","onSubmit","preventDefault","onToggleModified","this","timer","setInterval","clearInterval","done","hidden","modified","onDeleted","onToggleDone","type","checked","onChange","includes","autoFocus","Component","Date","TaskList","tasks","id","NewTaskForm","onTaskAdded","placeholder","Todo","maxId","todoData","createTask","filtersData","createFilter","activeFilter","onSelected","el","deleteTask","filter","addTask","newTask","deleteDoneTasks","todoCount","length","todoDataForRender","checkActiveFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b4e5864.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./tasksFilter.css\";\r\n\r\nconst TasksFilter = ({ label, hasClass, selecteFilter }) => {\r\n  let className = \"\";\r\n\r\n  if (hasClass) {\r\n    className = \"selected\";\r\n  }\r\n\r\n  return (\r\n    <button className={className} onClick={selecteFilter}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nTasksFilter.defaultProps = {\r\n  label: \"\",\r\n  hasClass: false,\r\n  selecteFilter: () => {},\r\n};\r\n\r\nTasksFilter.propTypes = {\r\n  label: PropTypes.string,\r\n  hasClass: PropTypes.bool,\r\n  selecteFilter: PropTypes.func,\r\n};\r\n\r\nexport default TasksFilter;\r\n","import TasksFilter from \"./tasksFilter.jsx\";\r\n\r\nexport default TasksFilter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TasksFilter from \"../tasksFilter\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = ({ filters, toDo, selecteFilter, clearCompleted }) => {\r\n  const elements = filters.map(({ label, hasClass }) => {\r\n    return (\r\n      <li key={label}>\r\n        <TasksFilter\r\n          label={label}\r\n          hasClass={hasClass}\r\n          selecteFilter={(event) => selecteFilter(event.target.textContent)}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{toDo} items left</span>\r\n      <ul className=\"filters\">{elements}</ul>\r\n      <button className=\"clear-completed\" onClick={clearCompleted}>\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nFooter.defaultProps = {\r\n  selecteFilter: () => {},\r\n  clearCompleted: () => {},\r\n  filters: [],\r\n  toDo: 0,\r\n};\r\n\r\nFooter.propTypes = {\r\n  selecteFilter: PropTypes.func,\r\n  clearCompleted: PropTypes.func,\r\n  filters: PropTypes.arrayOf(PropTypes.any),\r\n  toDo: PropTypes.number,\r\n};\r\n\r\nexport default Footer;\r\n","import Footer from \"./footer.jsx\";\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport \"./task.css\";\r\n\r\nexport default class Task extends Component {\r\n  state = {\r\n    time: formatDistanceToNow(this.props.date, {\r\n      addSuffix: true,\r\n      includeSeconds: true,\r\n    }),\r\n    label: this.props.label,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        time: formatDistanceToNow(this.props.date, {\r\n          addSuffix: true,\r\n          includeSeconds: true,\r\n        }),\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  onLabelChange = (e) => {\r\n    this.setState({\r\n      label: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onToggleModified();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      done,\r\n      hidden,\r\n      modified,\r\n      onDeleted,\r\n      onToggleDone,\r\n      onToggleModified,\r\n    } = this.props;\r\n\r\n    let className = \"\";\r\n\r\n    if (done) {\r\n      className += \" completed\";\r\n    }\r\n\r\n    if (hidden) {\r\n      className += \" hidden\";\r\n    }\r\n\r\n    if (modified) {\r\n      className += \" editing\";\r\n    }\r\n\r\n    return (\r\n      <li className={className}>\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            checked={done}\r\n            onChange={onToggleDone}\r\n          />\r\n          <label>\r\n            <span className=\"description\">{this.state.label}</span>\r\n            <span className=\"created\">{this.state.time}</span>\r\n          </label>\r\n          <button\r\n            onClick={onToggleModified}\r\n            className=\"icon icon-edit\"\r\n          ></button>\r\n          <button onClick={onDeleted} className=\"icon icon-destroy\"></button>\r\n        </div>\r\n        {className.includes(\"editing\") && (\r\n          <form onSubmit={this.onSubmit}>\r\n            <input\r\n              onChange={this.onLabelChange}\r\n              type=\"text\"\r\n              className=\"edit\"\r\n              value={this.state.label}\r\n              autoFocus\r\n            />\r\n          </form>\r\n        )}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nTask.defaultProps = {\r\n  label: \"\",\r\n  done: false,\r\n  hidden: false,\r\n  modified: false,\r\n  date: new Date(),\r\n  onDeleted: () => {},\r\n  onToggleDone: () => {},\r\n  onToggleModified: () => {},\r\n};\r\n\r\nTask.propTypes = {\r\n  done: PropTypes.bool,\r\n  hidden: PropTypes.bool,\r\n  modified: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  onDeleted: PropTypes.func,\r\n  onToggleDone: PropTypes.func,\r\n  onToggleModified: PropTypes.func,\r\n  date: PropTypes.instanceOf(Date),\r\n};\r\n","import Task from \"./task.jsx\";\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Task from \"../task\";\r\nimport \"./taskList.css\";\r\n\r\nconst TaskList = ({ tasks, onDeleted, onToggleDone, onToggleModified }) => {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {tasks.map(({ label, done, hidden, modified, id, date }) => (\r\n        <Task\r\n          key={id}\r\n          date={date}\r\n          done={done}\r\n          label={label}\r\n          hidden={hidden}\r\n          modified={modified}\r\n          onDeleted={() => onDeleted(id)}\r\n          onToggleDone={() => onToggleDone(id)}\r\n          onToggleModified={() => onToggleModified(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nTaskList.defaultProps = {\r\n  tasks: [],\r\n  onDeleted: () => {},\r\n  onToggleDone: () => {},\r\n  onToggleModified: () => {},\r\n};\r\n\r\nTaskList.propTypes = {\r\n  onDeleted: PropTypes.func,\r\n  onToggleDone: PropTypes.func,\r\n  onToggleModified: PropTypes.func,\r\n  tasks: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nexport default TaskList;\r\n","import TaskList from \"./taskList.jsx\";\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./newTaskForm.css\";\r\n\r\nexport default class NewTaskForm extends Component {\r\n  state = {\r\n    label: \"\",\r\n  };\r\n\r\n  onLabelChange = (e) => {\r\n    this.setState({\r\n      label: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\t\tthis.props.onTaskAdded(this.state.label);\r\n\t\tthis.setState({\r\n\t\t\tlabel: \"\",\r\n\t\t})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <input\r\n            autoFocus\r\n            type=\"text\"\r\n            className=\"new-todo\"\r\n            value={this.state.label}\r\n            onChange={this.onLabelChange}\r\n            placeholder=\"What needs to be done?\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nNewTaskForm.defaultProps = {\r\n  onTaskAdded: () => {}\r\n};\r\n\r\nNewTaskForm.propTypes = {\r\n  onTaskAdded: PropTypes.func,\r\n};\r\n","import NewTaskForm from \"./newTaskForm.jsx\";\r\n\r\nexport default NewTaskForm;\r\n","import Todo from \"./todo.jsx\";\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport Footer from \"../footer\";\r\nimport TaskList from \"../taskList\";\r\nimport NewTaskForm from \"../newTaskForm\";\r\nimport \"./todo.css\";\r\n\r\n\r\nexport default class Todo extends Component {\r\n  maxId = 1;\r\n\r\n  state = {\r\n    todoData: [\r\n      this.createTask(\"Completed task\"),\r\n      this.createTask(\"Editing task\"),\r\n      this.createTask(\"Active task\"),\r\n    ],\r\n    filtersData: [\r\n      this.createFilter(\"All\", true),\r\n      this.createFilter(\"Active\", false),\r\n      this.createFilter(\"Completed\", false),\r\n    ],\r\n    activeFilter: \"All\",\r\n  };\r\n\r\n  createFilter(label, hasClass) {\r\n    return {\r\n      label,\r\n      hasClass,\r\n    };\r\n  }\r\n\r\n  createTask(label) {\r\n    return {\r\n      label,\r\n      done: false,\r\n      hidden: false,\r\n      modified: false,\r\n      id: this.maxId++,\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  checkActiveFilter(activeFilter, el) {\r\n    switch (activeFilter) {\r\n      case \"Active\":\r\n        if (el.done) {\r\n          return { ...el, hidden: true };\r\n        }\r\n\r\n        return { ...el, hidden: false };\r\n      case \"Completed\":\r\n        if (!el.done) {\r\n          return { ...el, hidden: true };\r\n        }\r\n\r\n        return { ...el, hidden: false };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  onSelected = (label) => {\r\n    this.setState(({ filtersData }) => {\r\n      const newFiltersData = filtersData.map((el) => {\r\n        if (el.label !== label) {\r\n          return { ...el, hasClass: false };\r\n        }\r\n\r\n        return { ...el, hasClass: true };\r\n      });\r\n\r\n      return {\r\n        filtersData: newFiltersData,\r\n        activeFilter: label,\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArray = todoData.filter((el) => el.id !== id);\r\n\r\n      return {\r\n        todoData: newArray,\r\n      };\r\n    });\r\n  };\r\n\r\n  addTask = (label) => {\r\n    const newTask = this.createTask(label);\r\n\r\n    this.setState(({ todoData }) => {\r\n      const newArray = [...todoData, newTask];\r\n\r\n      return {\r\n        todoData: newArray,\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleDone = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = todoData.map((el) => {\r\n        if (el.id === id) {\r\n          return { ...el, done: !el.done };\r\n        }\r\n\r\n        return el;\r\n      });\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleModified = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = todoData.map((el) => {\r\n        if (el.id === id) {\r\n          return { ...el, modified: !el.modified };\r\n        }\r\n\r\n        return el;\r\n      });\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteDoneTasks = () => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = todoData.filter((el) => !el.done);\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { todoData, filtersData, activeFilter } = this.state;\r\n    const todoCount = todoData.filter((el) => !el.done).length;\r\n    const todoDataForRender =\r\n      activeFilter === \"All\"\r\n        ? todoData\r\n        : todoData.map((el) => this.checkActiveFilter(activeFilter, el));\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <NewTaskForm onTaskAdded={this.addTask} />\r\n        <section className=\"main\">\r\n          <TaskList\r\n            tasks={todoDataForRender}\r\n            modified={this.modified}\r\n            onDeleted={this.deleteTask}\r\n            onToggleDone={this.onToggleDone}\r\n            onToggleModified={this.onToggleModified}\r\n          />\r\n          <Footer\r\n            toDo={todoCount}\r\n            filters={filtersData}\r\n            selecteFilter={this.onSelected}\r\n            clearCompleted={this.deleteDoneTasks}\r\n          />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport Todo from \"./Components/todo\";\r\n\r\nReactDOM.render(<Todo />, document.getElementById(\"container\"));\r\n"],"sourceRoot":""}