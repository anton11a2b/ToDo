{"version":3,"sources":["Components/tasksFilter/index.js","Components/tasksFilter/tasksFilter.jsx","Components/footer/index.js","Components/footer/footer.jsx","Components/task/index.js","Components/task/task.jsx","Components/taskList/index.js","Components/taskList/taskList.jsx","Components/newTaskForm/index.js","Components/newTaskForm/newTaskForm.jsx","Components/todo/index.js","Components/todo/todo.jsx","index.js"],"names":["TasksFilter","label","hasClass","selecteFilter","className","onClick","Footer","filters","toDo","clearCompleted","elements","map","event","target","textContent","Task","onDeleted","onToggleDone","done","hidden","type","includes","value","TaskList","tasks","id","NewTaskForm","state","onLabelChange","e","setState","onSubmit","preventDefault","props","onTaskAdded","this","onChange","placeholder","autoFocus","Component","Todo","maxId","todoData","createTask","filtersData","createFilter","activeFilter","onSelected","el","deleteTask","filter","addTask","newTask","deleteDoneTasks","todoCount","length","todoDataForRender","checkActiveFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4ec1b60.chunk.js","sourcesContent":["import TasksFilter from \"./tasksFilter.jsx\";\r\n\r\nexport default TasksFilter;\r\n","import React from \"react\";\r\nimport \"./tasksFilter.css\";\r\n\r\nconst TasksFilter = ({ label, hasClass, selecteFilter }) => {\r\n  let className = \"\";\r\n\r\n  if (hasClass) {\r\n    className = \"selected\";\r\n  }\r\n\r\n  return (\r\n    <button className={className} onClick={selecteFilter}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default TasksFilter;\r\n","import Footer from \"./footer.jsx\";\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport TasksFilter from \"../tasksFilter\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = ({ filters, toDo, selecteFilter, clearCompleted }) => {\r\n  const elements = filters.map(({ label, hasClass}) => {\r\n    return (\r\n      <li key={label}>\r\n        <TasksFilter\r\n          label={label}\r\n          hasClass={hasClass}\r\n          selecteFilter={(event) => selecteFilter(event.target.textContent)}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{toDo} items left</span>\r\n      <ul className=\"filters\">{elements}</ul>\r\n      <button className=\"clear-completed\" onClick={clearCompleted}>\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Task from \"./task.jsx\";\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport \"./task.css\";\r\n\r\nconst Task = ({ label, onDeleted, onToggleDone, done, hidden }) => {\r\n  let className = \"\";\r\n\r\n  if (done) {\r\n    className += \" completed\";\r\n\t}\r\n\r\n  if (hidden) {\r\n    className += \" hidden\";\r\n  }\r\n\r\n  return (\r\n    <li className={className}>\r\n      <div className=\"view\">\r\n        <input className=\"toggle\" type=\"checkbox\" />\r\n        <label>\r\n          <span className=\"description\" onClick={onToggleDone}>\r\n            {label}\r\n          </span>\r\n        </label>\r\n        <button className=\"icon icon-edit\"></button>\r\n        <button onClick={onDeleted} className=\"icon icon-destroy\"></button>\r\n      </div>\r\n      {className.includes(\"editing\") && (\r\n        <input type=\"text\" className=\"edit\" value=\"Editing task\" />\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import TaskList from \"./taskList.jsx\";\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport Task from \"../task\";\r\nimport \"./taskList.css\";\r\n\r\nconst TaskList = ({ tasks, onDeleted, onToggleDone }) => {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {tasks.map(({ label, done, hidden, id }) => (\r\n        <Task\r\n          key={id}\r\n          done={done}\r\n          label={label}\r\n          hidden={hidden}\r\n          onDeleted={() => onDeleted(id)}\r\n          onToggleDone={() => onToggleDone(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import NewTaskForm from \"./newTaskForm.jsx\";\r\n\r\nexport default NewTaskForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./newTaskForm.css\";\r\n\r\nexport default class NewTaskForm extends Component {\r\n  state = {\r\n    label: \"\",\r\n  };\r\n\r\n  onLabelChange = (e) => {\r\n    this.setState({\r\n      label: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\t\tthis.props.onTaskAdded(this.state.label);\r\n\t\tthis.setState({\r\n\t\t\tlabel: \"\",\r\n\t\t})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"new-todo\"\r\n            onChange={this.onLabelChange}\r\n            placeholder=\"What needs to be done?\"\r\n            value={this.state.label}\r\n            autoFocus\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import Todo from \"./todo.jsx\";\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport Footer from \"../footer\";\r\nimport TaskList from \"../taskList\";\r\nimport NewTaskForm from \"../newTaskForm\";\r\nimport \"./todo.css\";\r\n// import id from \"date-fns/esm/locale/id/index.js\";\r\n\r\nexport default class Todo extends Component {\r\n  maxId = 1;\r\n\r\n  state = {\r\n    todoData: [\r\n      this.createTask(\"Completed task\"),\r\n      this.createTask(\"Editing task\"),\r\n      this.createTask(\"Active task\"),\r\n    ],\r\n    filtersData: [\r\n      this.createFilter(\"All\", true),\r\n      this.createFilter(\"Active\", false),\r\n      this.createFilter(\"Completed\", false),\r\n    ],\r\n    activeFilter: \"All\",\r\n  };\r\n\r\n  createFilter(label, hasClass) {\r\n    return {\r\n      label,\r\n      hasClass,\r\n    };\r\n  }\r\n\r\n  createTask(label) {\r\n    return {\r\n      label,\r\n      done: false,\r\n      hidden: false,\r\n      id: this.maxId++,\r\n    };\r\n  }\r\n\r\n  checkActiveFilter(activeFilter, el) {\r\n    switch (activeFilter) {\r\n      case \"Active\":\r\n        if (el.done) {\r\n          return { ...el, hidden: true };\r\n        }\r\n\r\n        return { ...el, hidden: false };\r\n      case \"Completed\":\r\n        if (!el.done) {\r\n          return { ...el, hidden: true };\r\n        }\r\n\r\n        return { ...el, hidden: false };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  onSelected = (label) => {\r\n    this.setState(({ filtersData }) => {\r\n      const newFiltersData = filtersData.map((el) => {\r\n        if (el.label !== label) {\r\n          const newElement = { ...el, hasClass: false };\r\n\r\n          return newElement;\r\n        }\r\n\r\n        const newElement = { ...el, hasClass: true };\r\n\r\n        return newElement;\r\n      });\r\n\r\n      return {\r\n        filtersData: newFiltersData,\r\n        activeFilter: label,\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArray = todoData.filter((el) => el.id !== id);\r\n\r\n      return {\r\n        todoData: newArray,\r\n      };\r\n    });\r\n  };\r\n\r\n  addTask = (label) => {\r\n    const newTask = this.createTask(label);\r\n\r\n    this.setState(({ todoData }) => {\r\n      const newArray = [...todoData, newTask];\r\n\r\n      return {\r\n        todoData: newArray,\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleDone = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = todoData.map((el) => {\r\n        if (el.id === id) {\r\n          const newElement = { ...el, done: !el.done };\r\n\r\n          return newElement;\r\n        }\r\n\r\n        return el;\r\n      });\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteDoneTasks = () => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = todoData.filter((el) => !el.done);\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { todoData, filtersData, activeFilter } = this.state;\r\n    const todoCount = todoData.filter((el) => !el.done).length;\r\n    const todoDataForRender =\r\n      activeFilter === \"All\"\r\n        ? todoData\r\n        : todoData.map((el) => this.checkActiveFilter(activeFilter, el));\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <NewTaskForm onTaskAdded={this.addTask} />\r\n        <section className=\"main\">\r\n          <TaskList\r\n            tasks={todoDataForRender}\r\n            onDeleted={this.deleteTask}\r\n            onToggleDone={this.onToggleDone}\r\n          />\r\n          <Footer\r\n            filters={filtersData}\r\n            toDo={todoCount}\r\n            selecteFilter={this.onSelected}\r\n            clearCompleted={this.deleteDoneTasks}\r\n          />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport Todo from \"./Components/todo\";\r\n\r\nReactDOM.render(<Todo />, document.getElementById(\"container\"));\r\n"],"sourceRoot":""}