{"version":3,"sources":["Components/tasksFilter/tasksFilter.jsx","Components/footer/footer.jsx","Components/distanceToNow/distanceToNow.jsx","Components/timer/timer.jsx","Components/task/task.jsx","Components/taskList/taskList.jsx","Components/newTaskForm/newTaskForm.jsx","Components/todo/todo.jsx","index.jsx"],"names":["TasksFilter","label","hasClass","selecteFilter","className","type","onClick","defaultProps","Footer","filters","toDo","clearCompleted","elements","map","event","target","textContent","DistanceToNow","props","date","state","time","formatDistanceToNow","addSuffix","includeSeconds","this","timer","setInterval","setState","clearInterval","Component","Date","Timer","startTimer","secondsLeft","minutesLeft","isStarted","seconds","minutes","newTimer","pauseTimer","min","sec","classNamePlay","classNamePause","Task","onLabelChange","value","onSubmit","onToggleModified","preventDefault","done","hidden","modified","onDeleted","onToggleDone","checked","onChange","includes","autoFocus","TaskList","tasks","id","NewTaskForm","onTaskAdded","keyCode","onSecChange","onMinChange","onKeyDown","placeholder","Todo","maxId","todoData","createTask","filtersData","createFilter","activeFilter","deleteDoneTasks","filter","el","onSelected","deleteTask","addTask","Number","newTask","todoCount","length","todoDataForRender","checkActiveFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69aae0ef.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tasksFilter.css';\n\nconst TasksFilter = ({ label, hasClass, selecteFilter }) => {\n  let className = '';\n\n  if (hasClass) {\n    className = 'selected';\n  }\n\n  return (\n    <button type=\"button\" className={className} onClick={selecteFilter}>\n      {label}\n    </button>\n  );\n};\n\nTasksFilter.defaultProps = {\n  label: '',\n  hasClass: false,\n  selecteFilter: () => {},\n};\n\nTasksFilter.propTypes = {\n  label: PropTypes.string,\n  hasClass: PropTypes.bool,\n  selecteFilter: PropTypes.func,\n};\n\nexport default TasksFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TasksFilter from '../tasksFilter/tasksFilter';\nimport './footer.css';\n\nconst Footer = ({ filters, toDo, selecteFilter, clearCompleted }) => {\n  const elements = filters.map(({ label, hasClass }) => (\n    <li key={label}>\n      <TasksFilter\n        label={label}\n        hasClass={hasClass}\n        selecteFilter={(event) => selecteFilter(event.target.textContent)}\n      />\n    </li>\n  ));\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{toDo} items left</span>\n      <ul className=\"filters\">{elements}</ul>\n      <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  selecteFilter: () => {},\n  clearCompleted: () => {},\n  filters: [],\n  toDo: 0,\n};\n\nFooter.propTypes = {\n  selecteFilter: PropTypes.func,\n  clearCompleted: PropTypes.func,\n  filters: PropTypes.arrayOf(PropTypes.any),\n  toDo: PropTypes.number,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default class DistanceToNow extends Component {\n  constructor(props) {\n    super(props);\n\n    const { date } = this.props;\n    this.state = {\n      time: formatDistanceToNow(date, {\n        addSuffix: true,\n        includeSeconds: true,\n      }),\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      const { date } = this.props;\n\n      this.setState({\n        time: formatDistanceToNow(date, {\n          addSuffix: true,\n          includeSeconds: true,\n        }),\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { time } = this.state;\n\n    return <span className=\"created\">{time}</span>;\n  }\n}\n\nDistanceToNow.defaultProps = {\n  date: new Date(),\n};\n\nDistanceToNow.propTypes = {\n  date: PropTypes.instanceOf(Date),\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    const { min, sec } = this.props;\n\n    this.state = {\n      isStarted: false,\n      timer: null,\n      minutesLeft: min,\n      secondsLeft: sec,\n    };\n  }\n\n  componentWillUnmount() {\n    const { timer } = this.state;\n\n    clearInterval(timer);\n  }\n\n  startTimer = () => {\n    const { timer, secondsLeft, minutesLeft } = this.state;\n\n    clearInterval(timer);\n\n    this.setState({ isStarted: true });\n    let seconds = secondsLeft;\n    let minutes = minutesLeft;\n\n    const newTimer = setInterval(() => {\n      if (seconds !== '00') {\n        seconds -= 1;\n        if (seconds < 10) {\n          seconds = `0${seconds}`;\n        }\n      } else if (minutes !== '00' && seconds === '00') {\n        minutes -= 1;\n        seconds = 59;\n        if (minutes < 10) {\n          minutes = `0${minutes}`;\n        }\n      } else if (minutes === '00' && seconds === '00') {\n        clearInterval(timer);\n        this.setState({ isStarted: false });\n      }\n\n      this.setState({ secondsLeft: seconds, minutesLeft: minutes });\n    }, 1000);\n\n    return this.setState({ timer: newTimer });\n  };\n\n  pauseTimer = () => {\n    const { timer } = this.state;\n\n    this.setState({ isStarted: false });\n\n    clearInterval(timer);\n  };\n\n  render() {\n    const { minutesLeft, secondsLeft, isStarted } = this.state;\n\n    let classNamePlay = 'icon icon-play';\n    let classNamePause = 'icon icon-pause';\n\n    if (isStarted) {\n      classNamePlay += ' hidden';\n    } else {\n      classNamePause += ' hidden';\n    }\n\n    return (\n      <span className=\"description\">\n        <button type=\"button\" className={classNamePlay} onClick={this.startTimer} />\n        <button type=\"button\" className={classNamePause} onClick={this.pauseTimer} />\n        {minutesLeft}:{secondsLeft}\n      </span>\n    );\n  }\n}\n\nTimer.defaultProps = {\n  min: '',\n  sec: '',\n};\n\nTimer.propTypes = {\n  min: PropTypes.string,\n  sec: PropTypes.string,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DistanceToNow from '../distanceToNow/distanceToNow';\nimport Timer from '../timer/timer';\nimport './task.css';\n\nexport default class Task extends Component {\n  constructor(props) {\n    super(props);\n\n    const { label } = this.props;\n    this.state = {\n      label,\n    };\n  }\n\n  onLabelChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    const { onToggleModified } = this.props;\n\n    event.preventDefault();\n    onToggleModified();\n  };\n\n  render() {\n    const { done, hidden, modified, onDeleted, onToggleDone, onToggleModified, min, sec, date } = this.props;\n    const { label } = this.state;\n\n    let className = '';\n\n    if (done) {\n      className += ' completed';\n    }\n\n    if (hidden) {\n      className += ' hidden';\n    }\n\n    if (modified) {\n      className += ' editing';\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={done} onChange={onToggleDone} />\n          <label>\n            <span className=\"title\">{label}</span>\n            <Timer min={min} sec={sec} />\n            <DistanceToNow date={date} />\n          </label>\n          <button type=\"button\" onClick={onToggleModified} className=\"icon icon-edit\" />\n          <button type=\"button\" onClick={onDeleted} className=\"icon icon-destroy\" />\n        </div>\n        {className.includes('editing') && (\n          <form onSubmit={this.onSubmit}>\n            <input onChange={this.onLabelChange} type=\"text\" className=\"edit\" value={label} autoFocus />\n          </form>\n        )}\n      </li>\n    );\n  }\n}\n\nTask.defaultProps = {\n  min: '',\n  sec: '',\n  label: '',\n  done: false,\n  hidden: false,\n  modified: false,\n  date: new Date(),\n  onDeleted: () => {},\n  onToggleDone: () => {},\n  onToggleModified: () => {},\n};\n\nTask.propTypes = {\n  min: PropTypes.string,\n  sec: PropTypes.string,\n  label: PropTypes.string,\n  done: PropTypes.bool,\n  hidden: PropTypes.bool,\n  modified: PropTypes.bool,\n  onDeleted: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleModified: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../task/task';\nimport './taskList.css';\n\nconst TaskList = ({ tasks, onDeleted, onToggleDone, onToggleModified }) => (\n  <ul className=\"todo-list\">\n    {tasks.map(({ label, done, hidden, modified, id, date, min, sec }) => (\n      <Task\n        key={id}\n        min={min}\n        sec={sec}\n        date={date}\n        done={done}\n        label={label}\n        hidden={hidden}\n        modified={modified}\n        onDeleted={() => onDeleted(id)}\n        onToggleDone={() => onToggleDone(id)}\n        onToggleModified={() => onToggleModified(id)}\n      />\n    ))}\n  </ul>\n);\n\nTaskList.defaultProps = {\n  tasks: [],\n  onDeleted: () => {},\n  onToggleDone: () => {},\n  onToggleModified: () => {},\n};\n\nTaskList.propTypes = {\n  onDeleted: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleModified: PropTypes.func,\n  tasks: PropTypes.arrayOf(PropTypes.any),\n};\n\nexport default TaskList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './newTaskForm.css';\n\nexport default class NewTaskForm extends Component {\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    const { onTaskAdded } = this.props;\n    const { label } = this.state;\n\n    if (event.keyCode === 13) {\n      onTaskAdded(label);\n      this.setState({\n        label: '',\n      });\n    }\n  };\n\n  render() {\n    const { label } = this.state;\n    const { onSecChange, onMinChange, minutes, seconds } = this.props;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form className=\"new-todo-form\">\n          <input\n            autoFocus\n            type=\"text\"\n            className=\"new-todo\"\n            value={label}\n            onKeyDown={this.onSubmit}\n            onChange={this.onLabelChange}\n            placeholder=\"What needs to be done?\"\n          />\n          <input\n            type=\"number\"\n            className=\"new-todo-form__timer\"\n            placeholder=\"Min\"\n            value={minutes}\n            onKeyDown={this.onSubmit}\n            onChange={onMinChange}\n          />\n          <input\n            type=\"number\"\n            className=\"new-todo-form__timer\"\n            placeholder=\"Sec\"\n            value={seconds}\n            onKeyDown={this.onSubmit}\n            onChange={onSecChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTaskForm.defaultProps = {\n  minutes: '',\n  seconds: '',\n  onTaskAdded: () => {},\n  onSecChange: () => {},\n  onMinChange: () => {},\n};\n\nNewTaskForm.propTypes = {\n  minutes: PropTypes.string,\n  seconds: PropTypes.string,\n  onTaskAdded: PropTypes.func,\n  onSecChange: PropTypes.func,\n  onMinChange: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport Footer from '../footer/footer';\nimport TaskList from '../taskList/taskList';\nimport NewTaskForm from '../newTaskForm/newTaskForm';\nimport './todo.css';\n\nexport default class Todo extends Component {\n  maxId = 1;\n\n  state = {\n    todoData: [\n      this.createTask('Completed task', '12', '30'),\n      this.createTask('Editing task', '12', '30'),\n      this.createTask('Active task', '12', '30'),\n    ],\n    filtersData: [\n      this.createFilter('All', true),\n      this.createFilter('Active', false),\n      this.createFilter('Completed', false),\n    ],\n    activeFilter: 'All',\n    minutes: '',\n    seconds: '',\n  };\n\n  deleteDoneTasks = () => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.filter((el) => !el.done);\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onSelected = (label) => {\n    this.setState(({ filtersData }) => {\n      const newFiltersData = filtersData.map((el) => {\n        if (el.label !== label) {\n          return { ...el, hasClass: false };\n        }\n\n        return { ...el, hasClass: true };\n      });\n\n      return {\n        filtersData: newFiltersData,\n        activeFilter: label,\n      };\n    });\n  };\n\n  deleteTask = (id) => {\n    this.setState(({ todoData }) => {\n      const newArray = todoData.filter((el) => el.id !== id);\n\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  addTask = (label) => {\n    let { minutes, seconds } = this.state;\n\n    if (Number(minutes) < 10) {\n      minutes = `0${Number(minutes)}`;\n    }\n\n    if (seconds < 10) {\n      seconds = `0${Number(seconds)}`;\n    }\n\n    if (label) {\n      const newTask = this.createTask(label, minutes, seconds);\n\n      this.setState(({ todoData }) => {\n        const newArray = [...todoData, newTask];\n\n        return {\n          todoData: newArray,\n          minutes: '',\n          seconds: '',\n        };\n      });\n    }\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.map((el) => {\n        if (el.id === id) {\n          return { ...el, done: !el.done };\n        }\n\n        return el;\n      });\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onToggleModified = (id) => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.map((el) => {\n        if (el.id === id) {\n          return { ...el, modified: !el.modified };\n        }\n\n        return el;\n      });\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onMinChange = (event) => {\n    let min = event.target.value;\n\n    if (Number(min) > 59) {\n      min = '59';\n    }\n\n    this.setState({ minutes: min });\n  };\n\n  onSecChange = (event) => {\n    let sec = event.target.value;\n\n    if (Number(sec) > 59) {\n      sec = '59';\n    }\n\n    this.setState({ seconds: sec });\n  };\n\n  createTask(label, min, sec) {\n    return {\n      sec,\n      min,\n      label,\n      done: false,\n      hidden: false,\n      modified: false,\n      isStarted: false,\n      id: this.maxId++,\n      date: new Date(),\n    };\n  }\n\n  createFilter(label, hasClass) {\n    return {\n      label,\n      hasClass,\n    };\n  }\n\n  checkActiveFilter(activeFilter, el) {\n    switch (activeFilter) {\n      case 'Active':\n        if (el.done) {\n          return { ...el, hidden: true };\n        }\n\n        return { ...el, hidden: false };\n      case 'Completed':\n        if (!el.done) {\n          return { ...el, hidden: true };\n        }\n\n        return { ...el, hidden: false };\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { todoData, filtersData, activeFilter, minutes, seconds } = this.state;\n    const todoCount = todoData.filter((el) => !el.done).length;\n    const todoDataForRender =\n      activeFilter === 'All' ? todoData : todoData.map((el) => this.checkActiveFilter(activeFilter, el));\n\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm\n          minutes={minutes}\n          seconds={seconds}\n          onTaskAdded={this.addTask}\n          onMinChange={this.onMinChange}\n          onSecChange={this.onSecChange}\n        />\n        <section className=\"main\">\n          <TaskList\n            tasks={todoDataForRender}\n            modified={this.modified}\n            onDeleted={this.deleteTask}\n            onToggleDone={this.onToggleDone}\n            onToggleModified={this.onToggleModified}\n          />\n          <Footer\n            toDo={todoCount}\n            filters={filtersData}\n            selecteFilter={this.onSelected}\n            clearCompleted={this.deleteDoneTasks}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todo from './Components/todo/todo';\n\nReactDOM.render(<Todo />, document.getElementById('container'));\n"],"sourceRoot":""}